{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "Calendar - FY13+",
      "lineageTag": "154093b0-0616-4a28-8297-ff281c7006d9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    /*",
        "    ****This Calendar was created and provided by Avi Singh****",
        "    ****This can be freely shared as long as this text comment is retained.****",
        "    http://www.youtube.com/PowerBIPro",
        "    www.LearnPowerBI.com by Avi Singh",
        "    */",
        "    #\"LearnPowerBI.com by Avi Singh\" = 1,",
        "    StartDate = #date(2012, 7, 1),",
        "    EndDate = Date.AddMonths( Date.EndOfYear( #\"Max Rev Date\" ), FiscalYearEndMonth ) /*was \"#date(2017, 1, 1)\" Updated on 201802027: hard Coded End of Year caused some formulas to break, switching to dynamic date*/,",
        "    //Used for 'Offset' Column calculations, you may Hard code CurrentDate for testing e.g. #date(2017,9,1)",
        "    CurrentDate = Date.AddMonths( Date.EndOfYear( #\"Max Rev Date\" ), FiscalYearEndMonth ),",
        "    // Specify the last month in your Fiscal Year, e.g. if June is the last month of your Fiscal Year, specify 6",
        "    FiscalYearEndMonth = 6,",
        "    #\"==SET PARAMETERS ABOVE==\" = 1,",
        "    #\"==Build Date Column==\" = #\"==SET PARAMETERS ABOVE==\",",
        "    ListDates = List.Dates(StartDate, Number.From(EndDate - StartDate)+1, #duration(1,0,0,0)),",
        "    #\"Converted to Table\" = Table.FromList(ListDates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Renamed Columns as Date\" = Table.RenameColumns(#\"Converted to Table\",{{\"Column1\", \"Date\"}}),",
        "    // As far as Power BI is concerned, the 'Date' column is all that is needed :-) But we will continue and add a few Human-Friendly Columns",
        "    #\"Changed Type to Date\" = Table.TransformColumnTypes(#\"Renamed Columns as Date\",{{\"Date\", type date}}),",
        "    #\"==Add Calendar Columns==\" = #\"Changed Type to Date\",",
        "    #\"Added Calendar MonthNum\" = Table.AddColumn(#\"==Add Calendar Columns==\", \"MonthNum\", each Date.Month([Date]), Int64.Type),",
        "    #\"Added Month Name\" = Table.AddColumn(#\"Added Calendar MonthNum\", \"Month\", each Text.Start(Date.MonthName([Date]),3), type text),",
        "    #\"Added Month Name Long\" = Table.AddColumn(#\"Added Month Name\", \"MonthLong\", each Date.MonthName([Date]), type text),",
        "    #\"Added Calendar Quarter\" = Table.AddColumn(#\"Added Month Name Long\", \"Quarter\", each \"Q\" & Text.From(Date.QuarterOfYear([Date]))),",
        "    #\"Added Calendar Year\" = Table.AddColumn(#\"Added Calendar Quarter\", \"Year\", each Date.Year([Date]), Int64.Type),",
        "    #\"==Add Fiscal Calendar Columns==\" = #\"Added Calendar Year\",",
        "    #\"Added FiscalMonthNum\" = Table.AddColumn(#\"==Add Fiscal Calendar Columns==\", \"FiscalMonthNum\", each if [MonthNum] > FiscalYearEndMonth",
        "then [MonthNum] - FiscalYearEndMonth",
        "else [MonthNum] + (12 - FiscalYearEndMonth), type number),",
        "    #\"Added FiscalMonth Name\" = Table.AddColumn(#\"Added FiscalMonthNum\", \"FiscalMonth\", each [Month]),",
        "    #\"Added FiscalMonth Name Long\" = Table.AddColumn(#\"Added FiscalMonth Name\", \"FiscalMonthLong\", each [MonthLong]),",
        "    #\"Added FiscalQuarter\" = Table.AddColumn(#\"Added FiscalMonth Name Long\", \"FiscalQuarter\", each \"FQ\" & Text.From(Number.RoundUp([FiscalMonthNum] / 3,0))),",
        "    #\"Added FiscalYear\" = Table.AddColumn(#\"Added FiscalQuarter\", \"FiscalYear\", each Text.End(",
        "  Text.From(",
        "    if [MonthNum] > FiscalYearEndMonth",
        "    then [Year] + 1",
        "    else [Year]",
        "  )",
        "  , 4",
        ")),",
        "",
        "    #\"==Add Calendar Date Offset Columns==\" = #\"Added FiscalYear\",",
        "    // Can be used to for example to show the past 3 months(CurMonthOffset = 0, -1, -2)",
        "    #\"Added CurMonthOffset\" = Table.AddColumn(#\"==Add Calendar Date Offset Columns==\", \"CurMonthOffset\", each ( Date.Year([Date]) - Date.Year(CurrentDate) ) * 12",
        "+ Date.Month([Date]) - Date.Month(CurrentDate), Int64.Type),",
        "    // Can be used to for example to show the past 3 quarters (CurQuarterOffset = 0, -1, -2)",
        "    #\"Added CurQuarterOffset\" = Table.AddColumn(#\"Added CurMonthOffset\", \"CurQuarterOffset\", each /*Year Difference*/",
        "       ( Date.Year([Date]) - Date.Year(CurrentDate) )*4",
        "       /*Quarter Difference*/",
        "      + Number.RoundUp(Date.Month([Date]) / 3) ",
        "      - Number.RoundUp(Date.Month(CurrentDate) / 3),",
        "Int64.Type),",
        "    // Can be used to for example to show the past 3 years (CurYearOffset = 0, -1, -2)",
        "    #\"Added CurYearOffset\" = Table.AddColumn(#\"Added CurQuarterOffset\", \"CurYearOffset\", each Date.Year([Date]) - Date.Year(CurrentDate), Int64.Type),",
        "    // Can be used to for example filter out all future dates",
        "    #\"Added FutureDate Flag\" = Table.AddColumn(#\"Added CurYearOffset\", \"FutureDate\", each if [Date] > CurrentDate then \"Future\" else \"Past\" ),",
        "    // FiscalYearOffset is the only Offset that is different.",
        "    // FiscalQuarterOffset = is same as CurQuarterOffset",
        "    // FiscalMonthOffset = is same as CurMonthOffset",
        "    #\"==Add FiscalYearOffset==\" = #\"Added FutureDate Flag\",",
        "    #\"Filtered Rows to CurrentDate\" = Table.SelectRows(#\"==Add FiscalYearOffset==\", each ([Date] = CurrentDate)),",
        "    CurrentFiscalYear = #\"Filtered Rows to CurrentDate\"{0}[FiscalYear],",
        "    #\"Continue...Orig Table\" = #\"==Add FiscalYearOffset==\",",
        "    #\"Added CurFiscalYearOffset\" = Table.AddColumn(#\"Continue...Orig Table\", \"CurFiscalYearOffset\", each Number.From(Text.Range([FiscalYear],2,2)) - ",
        "Number.From(Text.Range(CurrentFiscalYear,2,2))",
        "/*Extract the numerical portion, e.g. FY18 = 18*/),",
        "    #\"==Add General Columns==\" = #\"Added CurFiscalYearOffset\",",
        "    // Used as 'Sort by Column' for MonthYear columns",
        "    #\"Added MonthYearNum\" = Table.AddColumn(#\"==Add General Columns==\", \"MonthYearNum\", each [Year]*100 + [MonthNum] /*e.g. Sep-2016 would become 201609*/, Int64.Type),",
        "    #\"Added MonthYear\" = Table.AddColumn(#\"Added MonthYearNum\", \"MonthYear\", each [Month] & \"-\" & Text.End(Text.From([Year]),2)),",
        "    #\"Added MonthYearLong\" = Table.AddColumn(#\"Added MonthYear\", \"MonthYearLong\", each [Month] & \"-\" & Text.From([Year])),",
        "    #\"Added WeekdayNum\" = Table.AddColumn(#\"Added MonthYearLong\", \"WeekdayNum\", each Date.DayOfWeek([Date]), Int64.Type),",
        "    #\"Added Weekday Name\" = Table.AddColumn(#\"Added WeekdayNum\", \"Weekday\", each Text.Start(Date.DayOfWeekName([Date]),3), type text),",
        "    #\"Added WeekdayWeekend\" = Table.AddColumn(#\"Added Weekday Name\", \"WeekdayWeekend\", each if [WeekdayNum] = 0 or [WeekdayNum] = 6",
        "then \"Weekend\"",
        "else \"Weekday\"),",
        "    #\"==Improve Ultimate Table\" = #\"Added WeekdayWeekend\",",
        "    #\"----Add WeekSequenceNum----\" = #\"==Improve Ultimate Table\",",
        "    #\"Filtered Rows Sundays Only (Start of Week)\" = Table.SelectRows(#\"----Add WeekSequenceNum----\", each ([WeekdayNum] = 0)),",
        "    #\"Added Index WeekSequenceNum\" = Table.AddIndexColumn(#\"Filtered Rows Sundays Only (Start of Week)\", \"WeekSequenceNum\", 2, 1),",
        "    #\"Merged Queries Ultimate Table to WeekSequenceNum\" = Table.NestedJoin(#\"==Improve Ultimate Table\",{\"Date\"},#\"Added Index WeekSequenceNum\",{\"Date\"},\"Added Index WeekNum\",JoinKind.LeftOuter),",
        "    #\"Expanded Added Index WeekNum\" = Table.ExpandTableColumn(#\"Merged Queries Ultimate Table to WeekSequenceNum\", \"Added Index WeekNum\", {\"WeekSequenceNum\"}, {\"WeekSequenceNum\"}),",
        "    // somehow it ends up being unsorted after Expand Column, should not matter for the end table, but makes it harder to debug and check everything is correct. Thus sorting it.",
        "    #\"ReSorted Rows by Date\" = Table.Sort(#\"Expanded Added Index WeekNum\",{{\"Date\", Order.Ascending}}),",
        "    #\"Filled Down WeekSequenceNum\" = Table.FillDown(#\"ReSorted Rows by Date\",{\"WeekSequenceNum\"}),",
        "    #\"Replaced Value WeekSequenceNum null with 1\" = Table.ReplaceValue(#\"Filled Down WeekSequenceNum\",null,1,Replacer.ReplaceValue,{\"WeekSequenceNum\"}),",
        "    #\"----WeekSequenceNum Complete----\" = #\"Replaced Value WeekSequenceNum null with 1\",",
        "    Current_WeekSequenceNum = #\"----WeekSequenceNum Complete----\"{[Date = CurrentDate]}?[WeekSequenceNum],",
        "    #\"Added Custom CurWeekOffset\" = Table.AddColumn(#\"----WeekSequenceNum Complete----\", \"CurWeekOffset\", each [WeekSequenceNum] - Current_WeekSequenceNum, Int64.Type),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom CurWeekOffset\",{{\"Quarter\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"FiscalMonthNum\", \"SortFiscalMonth\"}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"FiscalMonth\", type text}, {\"FiscalMonthLong\", type text}, {\"FiscalQuarter\", type text}, {\"FiscalYear\", type text}, {\"FutureDate\", type text}, {\"CurFiscalYearOffset\", Int64.Type}}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Changed Type1\",{{\"MonthYearNum\", \"SortMonthYear\"}}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Renamed Columns1\",{{\"MonthYear\", type text}, {\"MonthYearLong\", type text}}),",
        "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Changed Type2\",{{\"WeekdayNum\", \"SortWeekday\"}}),",
        "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Renamed Columns2\",{{\"WeekdayWeekend\", type text}}),",
        "    #\"Renamed Columns3\" = Table.RenameColumns(#\"Changed Type3\",{{\"WeekSequenceNum\", \"SortWeekSequence\"}})",
        "in",
        "    #\"Renamed Columns3\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    /*\\n    ****This Calendar was created and provided by Avi Singh****\\n    ****This can be freely shared as long as this text comment is retained.****\\n    http://www.youtube.com/PowerBIPro\\n    www.LearnPowerBI.com by Avi Singh\\n    */\\n    #\\\"LearnPowerBI.com by Avi Singh\\\" = 1,\\n    StartDate = #date(2012, 7, 1),\\n    EndDate = Date.EndOfYear(DateTime.Date(DateTime.FixedLocalNow())) /*was \\\"#date(2017, 1, 1)\\\" Updated on 201802027: hard Coded End of Year caused some formulas to break, switching to dynamic date*/,\\n    //Used for 'Offset' Column calculations, you may Hard code CurrentDate for testing e.g. #date(2017,9,1)\\n    CurrentDate = DateTime.Date(DateTime.FixedLocalNow()),\\n    // Specify the last month in your Fiscal Year, e.g. if June is the last month of your Fiscal Year, specify 6\\n    FiscalYearEndMonth = 6,\\n    #\\\"==SET PARAMETERS ABOVE==\\\" = 1,\\n    #\\\"==Build Date Column==\\\" = #\\\"==SET PARAMETERS ABOVE==\\\",\\n    ListDates = List.Dates(StartDate, Number.From(EndDate - StartDate)+1, #duration(1,0,0,0)),\\n    #\\\"Converted to Table\\\" = Table.FromList(ListDates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Renamed Columns as Date\\\" = Table.RenameColumns(#\\\"Converted to Table\\\",{{\\\"Column1\\\", \\\"Date\\\"}}),\\n    // As far as Power BI is concerned, the 'Date' column is all that is needed :-) But we will continue and add a few Human-Friendly Columns\\n    #\\\"Changed Type to Date\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns as Date\\\",{{\\\"Date\\\", type date}}),\\n    #\\\"==Add Calendar Columns==\\\" = #\\\"Changed Type to Date\\\",\\n    #\\\"Added Calendar MonthNum\\\" = Table.AddColumn(#\\\"==Add Calendar Columns==\\\", \\\"MonthNum\\\", each Date.Month([Date]), Int64.Type),\\n    #\\\"Added Month Name\\\" = Table.AddColumn(#\\\"Added Calendar MonthNum\\\", \\\"Month\\\", each Text.Start(Date.MonthName([Date]),3), type text),\\n    #\\\"Added Month Name Long\\\" = Table.AddColumn(#\\\"Added Month Name\\\", \\\"MonthLong\\\", each Date.MonthName([Date]), type text),\\n    #\\\"Added Calendar Quarter\\\" = Table.AddColumn(#\\\"Added Month Name Long\\\", \\\"Quarter\\\", each \\\"Q\\\" & Text.From(Date.QuarterOfYear([Date]))),\\n    #\\\"Added Calendar Year\\\" = Table.AddColumn(#\\\"Added Calendar Quarter\\\", \\\"Year\\\", each Date.Year([Date]), Int64.Type),\\n    #\\\"==Add Fiscal Calendar Columns==\\\" = #\\\"Added Calendar Year\\\",\\n    #\\\"Added FiscalMonthNum\\\" = Table.AddColumn(#\\\"==Add Fiscal Calendar Columns==\\\", \\\"FiscalMonthNum\\\", each if [MonthNum] > FiscalYearEndMonth\\nthen [MonthNum] - FiscalYearEndMonth\\nelse [MonthNum] + (12 - FiscalYearEndMonth), type number),\\n    #\\\"Added FiscalMonth Name\\\" = Table.AddColumn(#\\\"Added FiscalMonthNum\\\", \\\"FiscalMonth\\\", each [Month]),\\n    #\\\"Added FiscalMonth Name Long\\\" = Table.AddColumn(#\\\"Added FiscalMonth Name\\\", \\\"FiscalMonthLong\\\", each [MonthLong]),\\n    #\\\"Added FiscalQuarter\\\" = Table.AddColumn(#\\\"Added FiscalMonth Name Long\\\", \\\"FiscalQuarter\\\", each \\\"FQ\\\" & Text.From(Number.RoundUp([FiscalMonthNum] / 3,0))),\\n    #\\\"Added FiscalYear\\\" = Table.AddColumn(#\\\"Added FiscalQuarter\\\", \\\"FiscalYear\\\", each Text.End(\\n  Text.From(\\n    if [MonthNum] > FiscalYearEndMonth\\n    then [Year] + 1\\n    else [Year]\\n  )\\n  , 4\\n)),\\n\\n    #\\\"==Add Calendar Date Offset Columns==\\\" = #\\\"Added FiscalYear\\\",\\n    // Can be used to for example to show the past 3 months(CurMonthOffset = 0, -1, -2)\\n    #\\\"Added CurMonthOffset\\\" = Table.AddColumn(#\\\"==Add Calendar Date Offset Columns==\\\", \\\"CurMonthOffset\\\", each ( Date.Year([Date]) - Date.Year(CurrentDate) ) * 12\\n+ Date.Month([Date]) - Date.Month(CurrentDate), Int64.Type),\\n    // Can be used to for example to show the past 3 quarters (CurQuarterOffset = 0, -1, -2)\\n    #\\\"Added CurQuarterOffset\\\" = Table.AddColumn(#\\\"Added CurMonthOffset\\\", \\\"CurQuarterOffset\\\", each /*Year Difference*/\\n       ( Date.Year([Date]) - Date.Year(CurrentDate) )*4\\n       /*Quarter Difference*/\\n      + Number.RoundUp(Date.Month([Date]) / 3) \\n      - Number.RoundUp(Date.Month(CurrentDate) / 3),\\nInt64.Type),\\n    // Can be used to for example to show the past 3 years (CurYearOffset = 0, -1, -2)\\n    #\\\"Added CurYearOffset\\\" = Table.AddColumn(#\\\"Added CurQuarterOffset\\\", \\\"CurYearOffset\\\", each Date.Year([Date]) - Date.Year(CurrentDate), Int64.Type),\\n    // Can be used to for example filter out all future dates\\n    #\\\"Added FutureDate Flag\\\" = Table.AddColumn(#\\\"Added CurYearOffset\\\", \\\"FutureDate\\\", each if [Date] > CurrentDate then \\\"Future\\\" else \\\"Past\\\" ),\\n    // FiscalYearOffset is the only Offset that is different.\\n    // FiscalQuarterOffset = is same as CurQuarterOffset\\n    // FiscalMonthOffset = is same as CurMonthOffset\\n    #\\\"==Add FiscalYearOffset==\\\" = #\\\"Added FutureDate Flag\\\",\\n    #\\\"Filtered Rows to CurrentDate\\\" = Table.SelectRows(#\\\"==Add FiscalYearOffset==\\\", each ([Date] = CurrentDate)),\\n    CurrentFiscalYear = #\\\"Filtered Rows to CurrentDate\\\"{0}[FiscalYear],\\n    #\\\"Continue...Orig Table\\\" = #\\\"==Add FiscalYearOffset==\\\",\\n    #\\\"Added CurFiscalYearOffset\\\" = Table.AddColumn(#\\\"Continue...Orig Table\\\", \\\"CurFiscalYearOffset\\\", each Number.From(Text.Range([FiscalYear],2,2)) - \\nNumber.From(Text.Range(CurrentFiscalYear,2,2))\\n/*Extract the numerical portion, e.g. FY18 = 18*/),\\n    #\\\"==Add General Columns==\\\" = #\\\"Added CurFiscalYearOffset\\\",\\n    // Used as 'Sort by Column' for MonthYear columns\\n    #\\\"Added MonthYearNum\\\" = Table.AddColumn(#\\\"==Add General Columns==\\\", \\\"MonthYearNum\\\", each [Year]*100 + [MonthNum] /*e.g. Sep-2016 would become 201609*/, Int64.Type),\\n    #\\\"Added MonthYear\\\" = Table.AddColumn(#\\\"Added MonthYearNum\\\", \\\"MonthYear\\\", each [Month] & \\\"-\\\" & Text.End(Text.From([Year]),2)),\\n    #\\\"Added MonthYearLong\\\" = Table.AddColumn(#\\\"Added MonthYear\\\", \\\"MonthYearLong\\\", each [Month] & \\\"-\\\" & Text.From([Year])),\\n    #\\\"Added WeekdayNum\\\" = Table.AddColumn(#\\\"Added MonthYearLong\\\", \\\"WeekdayNum\\\", each Date.DayOfWeek([Date]), Int64.Type),\\n    #\\\"Added Weekday Name\\\" = Table.AddColumn(#\\\"Added WeekdayNum\\\", \\\"Weekday\\\", each Text.Start(Date.DayOfWeekName([Date]),3), type text),\\n    #\\\"Added WeekdayWeekend\\\" = Table.AddColumn(#\\\"Added Weekday Name\\\", \\\"WeekdayWeekend\\\", each if [WeekdayNum] = 0 or [WeekdayNum] = 6\\nthen \\\"Weekend\\\"\\nelse \\\"Weekday\\\"),\\n    #\\\"==Improve Ultimate Table\\\" = #\\\"Added WeekdayWeekend\\\",\\n    #\\\"----Add WeekSequenceNum----\\\" = #\\\"==Improve Ultimate Table\\\",\\n    #\\\"Filtered Rows Sundays Only (Start of Week)\\\" = Table.SelectRows(#\\\"----Add WeekSequenceNum----\\\", each ([WeekdayNum] = 0)),\\n    #\\\"Added Index WeekSequenceNum\\\" = Table.AddIndexColumn(#\\\"Filtered Rows Sundays Only (Start of Week)\\\", \\\"WeekSequenceNum\\\", 2, 1),\\n    #\\\"Merged Queries Ultimate Table to WeekSequenceNum\\\" = Table.NestedJoin(#\\\"==Improve Ultimate Table\\\",{\\\"Date\\\"},#\\\"Added Index WeekSequenceNum\\\",{\\\"Date\\\"},\\\"Added Index WeekNum\\\",JoinKind.LeftOuter),\\n    #\\\"Expanded Added Index WeekNum\\\" = Table.ExpandTableColumn(#\\\"Merged Queries Ultimate Table to WeekSequenceNum\\\", \\\"Added Index WeekNum\\\", {\\\"WeekSequenceNum\\\"}, {\\\"WeekSequenceNum\\\"}),\\n    // somehow it ends up being unsorted after Expand Column, should not matter for the end table, but makes it harder to debug and check everything is correct. Thus sorting it.\\n    #\\\"ReSorted Rows by Date\\\" = Table.Sort(#\\\"Expanded Added Index WeekNum\\\",{{\\\"Date\\\", Order.Ascending}}),\\n    #\\\"Filled Down WeekSequenceNum\\\" = Table.FillDown(#\\\"ReSorted Rows by Date\\\",{\\\"WeekSequenceNum\\\"}),\\n    #\\\"Replaced Value WeekSequenceNum null with 1\\\" = Table.ReplaceValue(#\\\"Filled Down WeekSequenceNum\\\",null,1,Replacer.ReplaceValue,{\\\"WeekSequenceNum\\\"}),\\n    #\\\"----WeekSequenceNum Complete----\\\" = #\\\"Replaced Value WeekSequenceNum null with 1\\\",\\n    Current_WeekSequenceNum = #\\\"----WeekSequenceNum Complete----\\\"{[Date = CurrentDate]}?[WeekSequenceNum],\\n    #\\\"Added Custom CurWeekOffset\\\" = Table.AddColumn(#\\\"----WeekSequenceNum Complete----\\\", \\\"CurWeekOffset\\\", each [WeekSequenceNum] - Current_WeekSequenceNum, Int64.Type),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Added Custom CurWeekOffset\\\",{{\\\"Quarter\\\", type text}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"FiscalMonthNum\\\", \\\"SortFiscalMonth\\\"}}),\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"FiscalMonth\\\", type text}, {\\\"FiscalMonthLong\\\", type text}, {\\\"FiscalQuarter\\\", type text}, {\\\"FiscalYear\\\", type text}, {\\\"FutureDate\\\", type text}, {\\\"CurFiscalYearOffset\\\", Int64.Type}}),\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Changed Type1\\\",{{\\\"MonthYearNum\\\", \\\"SortMonthYear\\\"}}),\\n    #\\\"Changed Type2\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns1\\\",{{\\\"MonthYear\\\", type text}, {\\\"MonthYearLong\\\", type text}}),\\n    #\\\"Renamed Columns2\\\" = Table.RenameColumns(#\\\"Changed Type2\\\",{{\\\"WeekdayNum\\\", \\\"SortWeekday\\\"}}),\\n    #\\\"Changed Type3\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns2\\\",{{\\\"WeekdayWeekend\\\", type text}}),\\n    #\\\"Renamed Columns3\\\" = Table.RenameColumns(#\\\"Changed Type3\\\",{{\\\"WeekSequenceNum\\\", \\\"SortWeekSequence\\\"}})\\nin\\n    #\\\"Renamed Columns3\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Data_Source",
      "lineageTag": "05020849-dd92-43ce-b728-29ff9c51e854",
      "description": "This parameter allows the user to select as a data source Production (PADV) or one of the Snapshots. We only keep FYE Snapshots except for the current and previous FYs.",
      "text": [
        "\"ADVJUL23\" meta [IsParameterQuery=true, List={\"PADV\", \"ADVJUL20\", \"ADVJUL21\", \"ADVJUL22\", \"ADVOCT22\", \"ADVJAN23\", \"ADVAPR23\", \"ADVJUL23\", \"ADVJUL24\", \"ADVJUL25\"}, DefaultValue=\"PADV\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Alumni Rev Transactions_5+ Yrs",
      "lineageTag": "337f5a4c-3dab-4f59-97f1-a28955f721b8",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Oracle.Database(\"PADV\", [HierarchicalNavigation=true, Query=\"-- Brand new query to pull all Alumni revenue gifts, identifying those which are \"\"Jaybacker\"\" gifts; Alumni are defined by the view \"\"mvw_ent_old_vse_alumni_type\"\". smk 3/30/2023#(lf)#(lf)WITH gifts AS (#(lf)               select njb.trans_nbr                 trans_nbr,#(lf)                      'X'                           non_jb,#(lf)                      NULL                          jb,#(lf)                      te.donor_id                   donor_id,#(lf)                      g.gift_associated_credit_amt  soft_amt,#(lf)                      g.gift_associated_amount      legal_amt,#(lf)                      g.gift_associated_code        credit_type,#(lf)                      njb.trans_dt                  trans_dt,#(lf)                      njb.fiscal_yr                 fiscal_yr,#(lf)                      njb.allocation_code           allocation_code#(lf)                 from advur.mvw_total_revenue njb#(lf)                 left join advur.mvw_trans_entities te ON njb.trans_nbr = te.trans_nbr#(lf)                 left join advance.gift g              ON te.trans_nbr = g.gift_receipt_number#(lf)                where njb.allocation_code NOT IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)                and   njb.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)                and   g.gift_associated_code NOT IN ('M','H')#(lf)                and   g.gift_associated_amount > 0#(lf)            UNION ALL#(lf)            select njb.trans_nbr                 trans_nbr,#(lf)                   NULL                          non_jb,#(lf)                   'X'                           jb,#(lf)                   te.donor_id                   donor_id,#(lf)                   g.gift_associated_credit_amt  soft_amt,#(lf)                   g.gift_associated_amount      legal_amt,#(lf)                   g.gift_associated_code        credit_type,#(lf)                   njb.trans_dt                  trans_dt,#(lf)                   njb.fiscal_yr                 fiscal_yr,#(lf)                   njb.allocation_code           allocation_code#(lf)              from advur.mvw_total_revenue njb#(lf)              left join advur.mvw_trans_entities te ON njb.trans_nbr = te.trans_nbr#(lf)              left join advance.gift g              ON te.trans_nbr = g.gift_receipt_number AND te.donor_id = g.gift_donor_id#(lf)             where njb.allocation_code IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)             and   njb.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)             and   g.gift_associated_code NOT IN ('M','H')#(lf)             and   g.gift_associated_amount > 0#(lf)             )#(lf)#(lf)select distinct gft.donor_id                      \"\"Donor ID\"\",#(lf)       SUBSTR(t.VSE_ALUMNI_TYPE,5)                    \"\"Degree type\"\",#(lf)       gft.jb                                     \"\"JB Ind\"\",#(lf)       gft.non_jb                                 \"\"Non-JB Ind\"\",#(lf)       gft.trans_nbr                              \"\"Trans Nbr\"\",#(lf)       gft.fiscal_yr                              \"\"Fiscal Yr\"\",#(lf)       gft.trans_dt                               \"\"Trans Dt\"\",#(lf)       gft.allocation_code                        \"\"Alloc Cd\"\",#(lf)       gft.soft_amt                               \"\"Soft Crdt\"\",#(lf)       gft.legal_amt                              \"\"Lgl Crdt\"\"#(lf)  from advur.mvw_ent_vse_alumni_type t#(lf) inner join gifts gft  ON t.id_number = gft.donor_id#(lf) where t.vse_alumni_type LIKE '1%'#(lf) and   gft.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf) and   gft.legal_amt > 0#(lf)#(lf) order by \"\"Donor ID\"\", \"\"Fiscal Yr\"\", \"\"Degree type\"\" desc\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Trans Dt\", type date}, {\"Soft Crdt\", Currency.Type}, {\"Lgl Crdt\", Currency.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(\\\"PADV\\\", [HierarchicalNavigation=true, Query=\\\"-- Brand new query to pull all Alumni revenue gifts, identifying those which are \\\"\\\"Jaybacker\\\"\\\" gifts; Alumni are defined by the view \\\"\\\"mvw_ent_old_vse_alumni_type\\\"\\\". smk 3/30/2023#(lf)#(lf)WITH gifts AS (#(lf)               select njb.trans_nbr                 trans_nbr,#(lf)                      'X'                           non_jb,#(lf)                      NULL                          jb,#(lf)                      te.donor_id                   donor_id,#(lf)                      g.gift_associated_credit_amt  soft_amt,#(lf)                      g.gift_associated_amount      legal_amt,#(lf)                      g.gift_associated_code        credit_type,#(lf)                      njb.trans_dt                  trans_dt,#(lf)                      njb.fiscal_yr                 fiscal_yr,#(lf)                      njb.allocation_code           allocation_code#(lf)                 from advur.mvw_total_revenue njb#(lf)                 left join advur.mvw_trans_entities te ON njb.trans_nbr = te.trans_nbr#(lf)                 left join advance.gift g              ON te.trans_nbr = g.gift_receipt_number#(lf)                where njb.allocation_code NOT IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)                and   njb.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)                and   g.gift_associated_code NOT IN ('M','H')#(lf)                and   g.gift_associated_amount > 0#(lf)            UNION ALL#(lf)            select njb.trans_nbr                 trans_nbr,#(lf)                   NULL                          non_jb,#(lf)                   'X'                           jb,#(lf)                   te.donor_id                   donor_id,#(lf)                   g.gift_associated_credit_amt  soft_amt,#(lf)                   g.gift_associated_amount      legal_amt,#(lf)                   g.gift_associated_code        credit_type,#(lf)                   njb.trans_dt                  trans_dt,#(lf)                   njb.fiscal_yr                 fiscal_yr,#(lf)                   njb.allocation_code           allocation_code#(lf)              from advur.mvw_total_revenue njb#(lf)              left join advur.mvw_trans_entities te ON njb.trans_nbr = te.trans_nbr#(lf)              left join advance.gift g              ON te.trans_nbr = g.gift_receipt_number AND te.donor_id = g.gift_donor_id#(lf)             where njb.allocation_code IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)             and   njb.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)             and   g.gift_associated_code NOT IN ('M','H')#(lf)             and   g.gift_associated_amount > 0#(lf)             )#(lf)#(lf)select distinct gft.donor_id                      \\\"\\\"Donor ID\\\"\\\",#(lf)       SUBSTR(t.VSE_ALUMNI_TYPE,5)                    \\\"\\\"Degree type\\\"\\\",#(lf)       gft.jb                                     \\\"\\\"JB Ind\\\"\\\",#(lf)       gft.non_jb                                 \\\"\\\"Non-JB Ind\\\"\\\",#(lf)       gft.trans_nbr                              \\\"\\\"Trans Nbr\\\"\\\",#(lf)       gft.fiscal_yr                              \\\"\\\"Fiscal Yr\\\"\\\",#(lf)       gft.trans_dt                               \\\"\\\"Trans Dt\\\"\\\",#(lf)       gft.allocation_code                        \\\"\\\"Alloc Cd\\\"\\\",#(lf)       gft.soft_amt                               \\\"\\\"Soft Crdt\\\"\\\",#(lf)       gft.legal_amt                              \\\"\\\"Lgl Crdt\\\"\\\"#(lf)  from advur.mvw_ent_vse_alumni_type t#(lf) inner join gifts gft  ON t.id_number = gft.donor_id#(lf) where t.vse_alumni_type LIKE '1%'#(lf) and   gft.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf) and   gft.legal_amt > 0#(lf)#(lf) order by \\\"\\\"Donor ID\\\"\\\", \\\"\\\"Fiscal Yr\\\"\\\", \\\"\\\"Degree type\\\"\\\" desc\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Trans Dt\\\", type date}, {\\\"Soft Crdt\\\", Currency.Type}, {\\\"Lgl Crdt\\\", Currency.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Alumni Data Points",
      "lineageTag": "ae2e2aca-63f6-414e-b9cf-1982aa633f79",
      "text": [
        "let",
        "    Source = Oracle.Database(\"PADV\", [HierarchicalNavigation=true, Query=\"-- AKA \"\"Alumni Data Points\"\"; Query written to pull Alumni data for calculating participation; pulls new VSE Alumni Types as well as \"\"old\"\" VSE categories. smk 3/15/2023#(lf)-- Significant updates made to assign donor categories and types, identify current donors, lybunts, sybunts and non-donors, and to identify who is #(lf)--     acquired, retained or reactivated in the current year.  smk 3/23/2023#(lf)-- Added an indicator to show earliest year in which an Alumni earned their degree (i.e. the earliest degree row). smk 3/30/2023#(lf)-- Changed the exclusion to omit anyone who died before five years ago and to add the Alumni's Preferred School and last proc date for each donor. smk 4/27/2023#(lf)-- Updated to exclude those with active exclusion codes and those who do not have an active address, email or phone. smk 5/1/2023#(lf)#(lf)WITH grads AS (#(lf)               select d1.id_number aid, 'Graduate' cat#(lf)                 from advance.degrees d1#(lf)                where d1.institution_code = '6121'#(lf)                and   d1.degree_level_code IN ('M','D')#(lf)                and   d1.non_grad_code <> 'Y'#(lf)                and   d1.degree_type <> 'S'#(lf)                and   d1.admiss_status_code = ' '#(lf)                ),#(lf)undergrads AS (#(lf)               select d2.id_number aid, 'Undergrad' cat#(lf)                 from advance.degrees d2#(lf)                where d2.institution_code = '6121'#(lf)                and   d2.degree_level_code IN ('A','B','C','P','R')#(lf)                and   d2.non_grad_code <> 'Y'#(lf)                and   d2.degree_type <> 'S'#(lf)                and   d2.admiss_status_code = ' '#(lf)                ),#(lf)nongrads AS (#(lf)             select d3.id_number aid, 'Nongrad' cat#(lf)               from advance.degrees d3#(lf)              where d3.institution_code = '6121'#(lf)              and   d3.degree_level_code NOT IN ('A','B','C','P','R','M','D')#(lf)              and   (d3.non_grad_code = 'Y'#(lf)                or   d3.admiss_status_code IN ('DSM','WTH')#(lf)                or   d3.degree_level_code IN ('O','H') )#(lf)              and   d3.degree_type <> 'S'#(lf)              ),#(lf)firstdeg AS (#(lf)             select d4.id_number aid, MIN(nvl(d4.degree_year,substr(d4.stop_dt,1,4))) yr#(lf)               from advance.degrees d4#(lf)              where d4.institution_code = '6121'#(lf)              and   d4.degree_type <> 'S'#(lf)              and   d4.degree_year <> ' '#(lf)              group by d4.id_number#(lf)              ),#(lf)donors AS (#(lf)        select xg1.gift_donor_id did, sum(xg1.gift_associated_amount) ttl#(lf)          from advance.gift xg1#(lf)         where xg1.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))#(lf)         and   xg1.gift_associated_code NOT IN ('M','H')#(lf)         and   xg1.gift_associated_amount > 0#(lf)         group by xg1.gift_donor_id#(lf)         ),#(lf)proc AS (#(lf)         select xg5.gift_donor_id did, MAX(trunc(xpg5.processed_date)) dt#(lf)          from advance.gift xg5#(lf)         inner join advance.primary_gift xpg5 ON xg5.gift_receipt_number = xpg5.prim_gift_receipt_number#(lf)         where xg5.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))#(lf)         and   xg5.gift_associated_code NOT IN ('M','H')#(lf)         and   xg5.gift_associated_amount > 0#(lf)         group by xg5.gift_donor_id#(lf)         ),#(lf)lybunts AS (#(lf)        select xg2.gift_donor_id did, sum(xg2.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg2#(lf)         where xg2.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg2.gift_associated_code NOT IN ('M','H')#(lf)         group by xg2.gift_donor_id#(lf)         ),#(lf)sybunts AS (#(lf)        select xg3.gift_donor_id did, sum(xg3.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg3#(lf)         where xg3.gift_year_of_giving < advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg3.gift_year_of_giving >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-10#(lf)         and   xg3.gift_associated_code NOT IN ('M','H')#(lf)         group by xg3.gift_donor_id#(lf)         ),#(lf)excludes AS (#(lf)             select x.id_number eid#(lf)               from advance.entity x#(lf)              where (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) = '0000')#(lf)              or    (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) < advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-5)#(lf)             UNION ALL#(lf)             select ml.id_number eid#(lf)               from advance.mailing_list ml#(lf)              where ml.mail_list_code IN ('XCC','XNOC','XEMC','XMLC','XPHC')#(lf)              and   ml.mail_list_status_code = 'ACT'#(lf)             UNION ALL#(lf)             select x3.id_number eid#(lf)               from advance.entity x3#(lf)              where x3.record_type_code IN ('A','CA')#(lf)              and   x3.record_status_code IN ('A','I','L')#(lf)              and   x3.id_number NOT IN (#(lf)                                         select xaddr3.id_number#(lf)                                           from advance.address xaddr3#(lf)                                          where xaddr3.addr_status_code = 'A'#(lf)                                         UNION ALL#(lf)                                         select xem3.id_number#(lf)                                           from advance.email xem3#(lf)                                          where xem3.email_status_code = 'A'#(lf)                                         UNION ALL#(lf)                                         select xt3.id_number#(lf)                                           from advance.telephone xt3#(lf)                                          where xt3.telephone_status_code = 'A'#(lf)                                          )#(lf)               )#(lf)#(lf)select distinct xa10.id_number                    \"\"Entity ID\"\",#(lf)       e.pref_mail_name                           \"\"Alumni Name\"\",#(lf)       e.institutional_suffix                     \"\"Inst Suffix\"\",#(lf)       s.short_desc                               \"\"Pref School\"\",#(lf)       rs.short_desc                              \"\"Rec Status\"\",#(lf)       substr(e.death_dt,5,2)||'/'||substr(e.death_dt,7,2)||'/'||substr(e.death_dt,1,4) \"\"Death Dt\"\",#(lf)       substr(xa10.vse_alumni_type,instr(xa10.vse_alumni_type,' ')) \"\"Alumni Type\"\",#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Nongrad'#(lf)          ELSE 'Nongrad' END                      \"\"Old VSE Type\"\",#(lf)       g.cat                                      \"\"Grads\"\",#(lf)       ug.cat                                     \"\"Undergrads\"\",#(lf)       ng.cat                                     \"\"Non-Grads\"\",#(lf)       fd.yr                                      \"\"First Deg\"\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 THEN 'Current Donor'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) > 0 THEN 'Lybunt'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Sybunt'#(lf)          ELSE 'Non-Donor' END                    \"\"Donor Category\"\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Acquired'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) > 0 THEN 'Retained'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Reactivated'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Past Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Never-Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)          ELSE 'Investigate' END                  \"\"Donor Type\"\", #(lf)       nvl(dnrs.ttl,0)                            \"\"CY Total\"\",#(lf)       nvl(lyb.ttl,0)                             \"\"PY Total\"\",#(lf)       nvl(syb.ttl,0)                             \"\"Syb Total\"\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0)         \"\"Lifetime Giving\"\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0) - (nvl(dnrs.ttl,0) + nvl(lyb.ttl,0) + nvl(syb.ttl,0)) \"\"Pre-Syb Total\"\",#(lf)       prc.dt                                     \"\"Proc Dt\"\",#(lf)       xa10.vse_alumni_type                       Sort_Type,#(lf)       e.death_dt                                 Sort_Death,#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN '2'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN '1'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN '2'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN '3'#(lf)          ELSE '3' END                            Sort_Grad,#(lf)       e.pref_name_sort                           Sort_Alum#(lf)from advur.mvw_ent_vse_alumni_type xa10#(lf)inner join advance.entity e                   ON xa10.id_number = e.id_number#(lf)inner join advance.tms_record_status rs       ON e.record_status_code = rs.record_status_code#(lf)left join advance.tms_school s                ON e.pref_school_code = s.school_code#(lf)inner join firstdeg fd                        ON e.id_number = fd.aid#(lf)left join grads g                             ON e.id_number = g.aid#(lf)left join undergrads ug                       ON e.id_number = ug.aid#(lf)left join nongrads ng                         ON e.id_number = ng.aid#(lf)left join donors dnrs                         ON e.id_number = dnrs.did#(lf)left join lybunts lyb                         ON e.id_number = lyb.did#(lf)left join sybunts syb                         ON e.id_number = syb.did#(lf)left join proc prc                            ON e.id_number = prc.did#(lf)left join advance.donor_summary ds            ON e.id_number = ds.dnr_sum_id_number#(lf)where e.record_type_code IN ('A','CA')#(lf)and   xa10.vse_alumni_type LIKE '1%'#(lf)and   e.record_status_code NOT IN ('R','X','Z')#(lf)and   e.id_number NOT IN (select * from excludes)#(lf)#(lf)order by \"\"Rec Status\"\" desc, Sort_Death, Sort_Type, Sort_Alum\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"CY Total\", Currency.Type}, {\"PY Total\", Currency.Type}, {\"Syb Total\", Currency.Type}, {\"Lifetime Giving\", Currency.Type}, {\"Pre-Syb Total\", Currency.Type}, {\"Proc Dt\", type date}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(\\\"PADV\\\", [HierarchicalNavigation=true, Query=\\\"-- AKA \\\"\\\"Alumni Data Points\\\"\\\"; Query written to pull Alumni data for calculating participation; pulls new VSE Alumni Types as well as \\\"\\\"old\\\"\\\" VSE categories. smk 3/15/2023#(lf)-- Significant updates made to assign donor categories and types, identify current donors, lybunts, sybunts and non-donors, and to identify who is #(lf)--     acquired, retained or reactivated in the current year.  smk 3/23/2023#(lf)-- Added an indicator to show earliest year in which an Alumni earned their degree (i.e. the earliest degree row). smk 3/30/2023#(lf)-- Changed the exclusion to omit anyone who died before five years ago and to add the Alumni's Preferred School and last proc date for each donor. smk 4/27/2023#(lf)-- Updated to exclude those with active exclusion codes and those who do not have an active address, email or phone. smk 5/1/2023#(lf)#(lf)WITH grads AS (#(lf)               select d1.id_number aid, 'Graduate' cat#(lf)                 from advance.degrees d1#(lf)                where d1.institution_code = '6121'#(lf)                and   d1.degree_level_code IN ('M','D')#(lf)                and   d1.non_grad_code <> 'Y'#(lf)                and   d1.degree_type <> 'S'#(lf)                and   d1.admiss_status_code = ' '#(lf)                ),#(lf)undergrads AS (#(lf)               select d2.id_number aid, 'Undergrad' cat#(lf)                 from advance.degrees d2#(lf)                where d2.institution_code = '6121'#(lf)                and   d2.degree_level_code IN ('A','B','C','P','R')#(lf)                and   d2.non_grad_code <> 'Y'#(lf)                and   d2.degree_type <> 'S'#(lf)                and   d2.admiss_status_code = ' '#(lf)                ),#(lf)nongrads AS (#(lf)             select d3.id_number aid, 'Nongrad' cat#(lf)               from advance.degrees d3#(lf)              where d3.institution_code = '6121'#(lf)              and   d3.degree_level_code NOT IN ('A','B','C','P','R','M','D')#(lf)              and   (d3.non_grad_code = 'Y'#(lf)                or   d3.admiss_status_code IN ('DSM','WTH')#(lf)                or   d3.degree_level_code IN ('O','H') )#(lf)              and   d3.degree_type <> 'S'#(lf)              ),#(lf)firstdeg AS (#(lf)             select d4.id_number aid, MIN(nvl(d4.degree_year,substr(d4.stop_dt,1,4))) yr#(lf)               from advance.degrees d4#(lf)              where d4.institution_code = '6121'#(lf)              and   d4.degree_type <> 'S'#(lf)              and   d4.degree_year <> ' '#(lf)              group by d4.id_number#(lf)              ),#(lf)donors AS (#(lf)        select xg1.gift_donor_id did, sum(xg1.gift_associated_amount) ttl#(lf)          from advance.gift xg1#(lf)         where xg1.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))#(lf)         and   xg1.gift_associated_code NOT IN ('M','H')#(lf)         and   xg1.gift_associated_amount > 0#(lf)         group by xg1.gift_donor_id#(lf)         ),#(lf)proc AS (#(lf)         select xg5.gift_donor_id did, MAX(trunc(xpg5.processed_date)) dt#(lf)          from advance.gift xg5#(lf)         inner join advance.primary_gift xpg5 ON xg5.gift_receipt_number = xpg5.prim_gift_receipt_number#(lf)         where xg5.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))#(lf)         and   xg5.gift_associated_code NOT IN ('M','H')#(lf)         and   xg5.gift_associated_amount > 0#(lf)         group by xg5.gift_donor_id#(lf)         ),#(lf)lybunts AS (#(lf)        select xg2.gift_donor_id did, sum(xg2.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg2#(lf)         where xg2.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg2.gift_associated_code NOT IN ('M','H')#(lf)         group by xg2.gift_donor_id#(lf)         ),#(lf)sybunts AS (#(lf)        select xg3.gift_donor_id did, sum(xg3.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg3#(lf)         where xg3.gift_year_of_giving < advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg3.gift_year_of_giving >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-10#(lf)         and   xg3.gift_associated_code NOT IN ('M','H')#(lf)         group by xg3.gift_donor_id#(lf)         ),#(lf)excludes AS (#(lf)             select x.id_number eid#(lf)               from advance.entity x#(lf)              where (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) = '0000')#(lf)              or    (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) < advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-5)#(lf)             UNION ALL#(lf)             select ml.id_number eid#(lf)               from advance.mailing_list ml#(lf)              where ml.mail_list_code IN ('XCC','XNOC','XEMC','XMLC','XPHC')#(lf)              and   ml.mail_list_status_code = 'ACT'#(lf)             UNION ALL#(lf)             select x3.id_number eid#(lf)               from advance.entity x3#(lf)              where x3.record_type_code IN ('A','CA')#(lf)              and   x3.record_status_code IN ('A','I','L')#(lf)              and   x3.id_number NOT IN (#(lf)                                         select xaddr3.id_number#(lf)                                           from advance.address xaddr3#(lf)                                          where xaddr3.addr_status_code = 'A'#(lf)                                         UNION ALL#(lf)                                         select xem3.id_number#(lf)                                           from advance.email xem3#(lf)                                          where xem3.email_status_code = 'A'#(lf)                                         UNION ALL#(lf)                                         select xt3.id_number#(lf)                                           from advance.telephone xt3#(lf)                                          where xt3.telephone_status_code = 'A'#(lf)                                          )#(lf)               )#(lf)#(lf)select distinct xa10.id_number                    \\\"\\\"Entity ID\\\"\\\",#(lf)       e.pref_mail_name                           \\\"\\\"Alumni Name\\\"\\\",#(lf)       e.institutional_suffix                     \\\"\\\"Inst Suffix\\\"\\\",#(lf)       s.short_desc                               \\\"\\\"Pref School\\\"\\\",#(lf)       rs.short_desc                              \\\"\\\"Rec Status\\\"\\\",#(lf)       substr(e.death_dt,5,2)||'/'||substr(e.death_dt,7,2)||'/'||substr(e.death_dt,1,4) \\\"\\\"Death Dt\\\"\\\",#(lf)       substr(xa10.vse_alumni_type,instr(xa10.vse_alumni_type,' ')) \\\"\\\"Alumni Type\\\"\\\",#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Nongrad'#(lf)          ELSE 'Nongrad' END                      \\\"\\\"Old VSE Type\\\"\\\",#(lf)       g.cat                                      \\\"\\\"Grads\\\"\\\",#(lf)       ug.cat                                     \\\"\\\"Undergrads\\\"\\\",#(lf)       ng.cat                                     \\\"\\\"Non-Grads\\\"\\\",#(lf)       fd.yr                                      \\\"\\\"First Deg\\\"\\\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 THEN 'Current Donor'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) > 0 THEN 'Lybunt'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Sybunt'#(lf)          ELSE 'Non-Donor' END                    \\\"\\\"Donor Category\\\"\\\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Acquired'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) > 0 THEN 'Retained'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Reactivated'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Past Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Never-Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)          ELSE 'Investigate' END                  \\\"\\\"Donor Type\\\"\\\", #(lf)       nvl(dnrs.ttl,0)                            \\\"\\\"CY Total\\\"\\\",#(lf)       nvl(lyb.ttl,0)                             \\\"\\\"PY Total\\\"\\\",#(lf)       nvl(syb.ttl,0)                             \\\"\\\"Syb Total\\\"\\\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0)         \\\"\\\"Lifetime Giving\\\"\\\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0) - (nvl(dnrs.ttl,0) + nvl(lyb.ttl,0) + nvl(syb.ttl,0)) \\\"\\\"Pre-Syb Total\\\"\\\",#(lf)       prc.dt                                     \\\"\\\"Proc Dt\\\"\\\",#(lf)       xa10.vse_alumni_type                       Sort_Type,#(lf)       e.death_dt                                 Sort_Death,#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN '2'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN '1'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN '2'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN '1'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN '3'#(lf)          ELSE '3' END                            Sort_Grad,#(lf)       e.pref_name_sort                           Sort_Alum#(lf)from advur.mvw_ent_vse_alumni_type xa10#(lf)inner join advance.entity e                   ON xa10.id_number = e.id_number#(lf)inner join advance.tms_record_status rs       ON e.record_status_code = rs.record_status_code#(lf)left join advance.tms_school s                ON e.pref_school_code = s.school_code#(lf)inner join firstdeg fd                        ON e.id_number = fd.aid#(lf)left join grads g                             ON e.id_number = g.aid#(lf)left join undergrads ug                       ON e.id_number = ug.aid#(lf)left join nongrads ng                         ON e.id_number = ng.aid#(lf)left join donors dnrs                         ON e.id_number = dnrs.did#(lf)left join lybunts lyb                         ON e.id_number = lyb.did#(lf)left join sybunts syb                         ON e.id_number = syb.did#(lf)left join proc prc                            ON e.id_number = prc.did#(lf)left join advance.donor_summary ds            ON e.id_number = ds.dnr_sum_id_number#(lf)where e.record_type_code IN ('A','CA')#(lf)and   xa10.vse_alumni_type LIKE '1%'#(lf)and   e.record_status_code NOT IN ('R','X','Z')#(lf)and   e.id_number NOT IN (select * from excludes)#(lf)#(lf)order by \\\"\\\"Rec Status\\\"\\\" desc, Sort_Death, Sort_Type, Sort_Alum\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"CY Total\\\", Currency.Type}, {\\\"PY Total\\\", Currency.Type}, {\\\"Syb Total\\\", Currency.Type}, {\\\"Lifetime Giving\\\", Currency.Type}, {\\\"Pre-Syb Total\\\", Currency.Type}, {\\\"Proc Dt\\\", type date}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Key Measures",
      "lineageTag": "174dafaa-6bab-4be8-878d-99239c68e5f3",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Column1\\\", type text}}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type\\\",{\\\"Column1\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Divisional Goals",
      "lineageTag": "4282e392-c4e0-4cdb-abe0-5d0f9d2f171f",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"-- Created to pull UR Goals for Leads, Alumni Donors and Discovery Visits.  smk 8/10/2022#(lf)-- Updated to add goal for New Scholarships. smk 9/15/2022#(lf)-- Updated to add $50k+ Donors Goal. smk 10/7/2022#(lf)-- Updated to filter alumni donor goal to goal_team = 'UR' jdw 8/9/2023#(lf)#(lf)WITH leads AS (#(lf)SELECT g10.goal_time  fiscal_yr,#(lf)       g10.goal_value ld_goal#(lf)FROM advur.tbl_division_goals g10#(lf)WHERE g10.goal_usage <> 'C'#(lf)AND   g10.goal_dnr_total_type = 'LD'#(lf)AND   g10.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)#(lf)alumdnr AS (#(lf)SELECT g11.goal_time  fiscal_yr,#(lf)       g11.goal_value ad_goal#(lf)FROM advur.tbl_division_goals g11#(lf)WHERE g11.goal_usage <> 'C'#(lf)AND   g11.goal_dnr_total_type = 'AD'#(lf)AND   g11.GOAL_TEAM = 'UR'#(lf)AND   g11.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)#(lf)disc_visits AS (#(lf)SELECT g12.goal_time  fiscal_yr,#(lf)       g12.goal_value dsc_goal#(lf)FROM advur.tbl_division_goals g12#(lf)WHERE g12.goal_usage <> 'C'#(lf)AND   g12.goal_dnr_total_type = 'DV'#(lf)AND   g12.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)new_schols AS (#(lf)SELECT g13.goal_time  fiscal_yr,#(lf)       g13.goal_value ns_goal#(lf)FROM advur.tbl_division_goals g13#(lf)WHERE g13.goal_category1 = 'CSC'#(lf)AND   g13.goal_measure = 'ALLC'#(lf)AND   g13.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)fiftyk_dnrs AS (#(lf)SELECT g14.goal_time  fiscal_yr,#(lf)       g14.goal_value fk_goal#(lf)FROM advur.tbl_division_goals g14#(lf)WHERE g14.goal_dnr_total_type = 'FK'#(lf)AND   g14.goal_measure = 'DNR'#(lf)AND   g14.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       )#(lf)#(lf)#(lf)select lds.fiscal_yr                                   \"\"Fiscal Yr\"\",#(lf)       nvl(lds.ld_goal,0)                              \"\"Leads Goal\"\",#(lf)       nvl(ad.ad_goal,0)                               \"\"Alumni Dnr Goal\"\",#(lf)       nvl(dsc.dsc_goal,0)                             \"\"Discovery Goal\"\",#(lf)       nvl(ns.ns_goal,0)                               \"\"New Scholarships\"\",#(lf)       nvl(fk.fk_goal,0)                               \"\"$50k Donors Goal\"\"#(lf)from leads lds#(lf)left join alumdnr ad      ON lds.fiscal_yr = ad.fiscal_yr#(lf)left join disc_visits dsc ON lds.fiscal_yr = dsc.fiscal_yr#(lf)left join new_schols ns   ON lds.fiscal_yr = ns.fiscal_yr#(lf)left join fiftyk_dnrs fk  ON lds.fiscal_yr = fk.fiscal_yr\"])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"-- Created to pull UR Goals for Leads, Alumni Donors and Discovery Visits.  smk 8/10/2022#(lf)-- Updated to add goal for New Scholarships. smk 9/15/2022#(lf)-- Updated to add $50k+ Donors Goal. smk 10/7/2022#(lf)-- Updated to filter alumni donor goal to goal_team = 'UR' jdw 8/9/2023#(lf)#(lf)WITH leads AS (#(lf)SELECT g10.goal_time  fiscal_yr,#(lf)       g10.goal_value ld_goal#(lf)FROM advur.tbl_division_goals g10#(lf)WHERE g10.goal_usage <> 'C'#(lf)AND   g10.goal_dnr_total_type = 'LD'#(lf)AND   g10.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)#(lf)alumdnr AS (#(lf)SELECT g11.goal_time  fiscal_yr,#(lf)       g11.goal_value ad_goal#(lf)FROM advur.tbl_division_goals g11#(lf)WHERE g11.goal_usage <> 'C'#(lf)AND   g11.goal_dnr_total_type = 'AD'#(lf)AND   g11.GOAL_TEAM = 'UR'#(lf)AND   g11.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)#(lf)disc_visits AS (#(lf)SELECT g12.goal_time  fiscal_yr,#(lf)       g12.goal_value dsc_goal#(lf)FROM advur.tbl_division_goals g12#(lf)WHERE g12.goal_usage <> 'C'#(lf)AND   g12.goal_dnr_total_type = 'DV'#(lf)AND   g12.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)new_schols AS (#(lf)SELECT g13.goal_time  fiscal_yr,#(lf)       g13.goal_value ns_goal#(lf)FROM advur.tbl_division_goals g13#(lf)WHERE g13.goal_category1 = 'CSC'#(lf)AND   g13.goal_measure = 'ALLC'#(lf)AND   g13.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       ),#(lf)fiftyk_dnrs AS (#(lf)SELECT g14.goal_time  fiscal_yr,#(lf)       g14.goal_value fk_goal#(lf)FROM advur.tbl_division_goals g14#(lf)WHERE g14.goal_dnr_total_type = 'FK'#(lf)AND   g14.goal_measure = 'DNR'#(lf)AND   g14.goal_time  = advur.fn_get_fytd_fiscalyear(TO_CHAR(SYSDATE, 'MM/DD/YYYY'))#(lf)       )#(lf)#(lf)#(lf)select lds.fiscal_yr                                   \\\"\\\"Fiscal Yr\\\"\\\",#(lf)       nvl(lds.ld_goal,0)                              \\\"\\\"Leads Goal\\\"\\\",#(lf)       nvl(ad.ad_goal,0)                               \\\"\\\"Alumni Dnr Goal\\\"\\\",#(lf)       nvl(dsc.dsc_goal,0)                             \\\"\\\"Discovery Goal\\\"\\\",#(lf)       nvl(ns.ns_goal,0)                               \\\"\\\"New Scholarships\\\"\\\",#(lf)       nvl(fk.fk_goal,0)                               \\\"\\\"$50k Donors Goal\\\"\\\"#(lf)from leads lds#(lf)left join alumdnr ad      ON lds.fiscal_yr = ad.fiscal_yr#(lf)left join disc_visits dsc ON lds.fiscal_yr = dsc.fiscal_yr#(lf)left join new_schols ns   ON lds.fiscal_yr = ns.fiscal_yr#(lf)left join fiftyk_dnrs fk  ON lds.fiscal_yr = fk.fiscal_yr\\\"])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Alumni Data Points_FYE23",
      "lineageTag": "9ee2a514-9a1b-40d1-9802-d432f738636e",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"-- Query written to pull FY22's Alumni data for calculating participation; pulls new VSE Alumni Types as well as \"\"old\"\" VSE categories.#(lf)--    This query mirrors \"\"Alumni Participation Query\"\" but uses the FYE22 snapshot bridge to pull data.  smk 3/23/2023#(lf)-- Change to FY23 snapshot bridge. jdw 8/8/2023#(lf)#(lf)#(lf)WITH grads AS (#(lf)               select d1.id_number aid, 'Graduate' cat#(lf)                 from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d1#(lf)                where d1.institution_code = '6121'#(lf)                and   d1.degree_level_code IN ('M','D')#(lf)                and   d1.non_grad_code <> 'Y'#(lf)                and   d1.degree_type <> 'S'#(lf)                and   d1.admiss_status_code = ' '#(lf)                ),#(lf)undergrads AS (#(lf)               select d2.id_number aid, 'Undergrad' cat#(lf)                 from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d2#(lf)                where d2.institution_code = '6121'#(lf)                and   d2.degree_level_code IN ('A','B','C','P','R')#(lf)                and   d2.non_grad_code <> 'Y'#(lf)                and   d2.degree_type <> 'S'#(lf)                and   d2.admiss_status_code = ' '#(lf)                ),#(lf)nongrads AS (#(lf)             select d3.id_number aid, 'Nongrad' cat#(lf)               from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d3#(lf)              where d3.institution_code = '6121'#(lf)              and   d3.degree_level_code NOT IN ('A','B','C','P','R','M','D')#(lf)              and   (d3.non_grad_code = 'Y'#(lf)                or   d3.admiss_status_code IN ('DSM','WTH')#(lf)                or   d3.degree_level_code IN ('O','H') )#(lf)              and   d3.degree_type <> 'S'#(lf)              ),#(lf)donors AS (#(lf)        select xg1.gift_donor_id did, sum(xg1.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg1#(lf)         where xg1.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg1.gift_associated_code NOT IN ('M','H')#(lf)         group by xg1.gift_donor_id#(lf)         ),#(lf)  -- When it is available, update this to use the ADVJUL21 bridge#(lf)lybunts AS (#(lf)        select xg2.gift_donor_id did, sum(xg2.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg2#(lf)         where xg2.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-2#(lf)         and   xg2.gift_associated_code NOT IN ('M','H')#(lf)         group by xg2.gift_donor_id#(lf)         ),#(lf)  -- When it is available, update this to use the ADVJUL20 bridge#(lf)sybunts AS (#(lf)        select xg3.gift_donor_id did, sum(xg3.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg3#(lf)         where xg3.gift_year_of_giving < advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-2#(lf)         and   xg3.gift_year_of_giving >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-11#(lf)         and   xg3.gift_associated_code NOT IN ('M','H')#(lf)         group by xg3.gift_donor_id#(lf)         ),#(lf)excludes AS (#(lf)             select x.id_number eid#(lf)               from advance.entity@ADVANCE2ADVJUL23.CREIGHTON.EDU x#(lf)              where (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) = '0000')#(lf)              or    (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) < '2014')#(lf)               )#(lf)#(lf)select distinct xa10.id_number                    \"\"Entity ID\"\",#(lf)       e.pref_mail_name                           \"\"Alumni Name\"\",#(lf)       e.institutional_suffix                     \"\"Inst Suffix\"\",#(lf)       rs.short_desc                              \"\"Rec Status\"\",#(lf)       substr(e.death_dt,5,2)||'/'||substr(e.death_dt,7,2)||'/'||substr(e.death_dt,1,4) \"\"Death Dt\"\",#(lf)       substr(xa10.vse_alumni_type,instr(xa10.vse_alumni_type,' ')) \"\"Alumni Type\"\",#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Nongrad'#(lf)          ELSE 'Nongrad' END                      \"\"Old VSE Type\"\",#(lf)       g.cat                                      \"\"Grads\"\",#(lf)       ug.cat                                     \"\"Undergrads\"\",#(lf)       ng.cat                                     \"\"Non-Grads\"\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 THEN 'Current Donor'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) > 0 THEN 'Lybunt'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Sybunt'#(lf)          ELSE 'Non-Donor' END                    \"\"Donor Category\"\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Acquired'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) > 0 THEN 'Retained'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Reactivated'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Past Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Never-Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)          ELSE 'Investigate' END                  \"\"Donor Type\"\", #(lf)       nvl(dnrs.ttl,0)                            \"\"CY Total\"\",#(lf)       nvl(lyb.ttl,0)                             \"\"PY Total\"\",#(lf)       nvl(syb.ttl,0)                             \"\"Syb Total\"\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0)         \"\"Lifetime Giving\"\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0) - (nvl(dnrs.ttl,0) + nvl(lyb.ttl,0) + nvl(syb.ttl,0)) \"\"Pre-Syb Total\"\",#(lf)       xa10.vse_alumni_type                       Sort_Type,#(lf)       e.death_dt                                 Sort_Death,#(lf)       e.pref_name_sort                           Sort_Alum#(lf)from advur.mvw_ent_vse_alumni_type@ADVANCE2ADVJUL23.CREIGHTON.EDU xa10#(lf)inner join advance.entity@ADVANCE2ADVJUL23.CREIGHTON.EDU e             ON xa10.id_number = e.id_number#(lf)inner join advance.tms_record_status@ADVANCE2ADVJUL23.CREIGHTON.EDU rs ON e.record_status_code = rs.record_status_code#(lf)left join grads g                                                      ON e.id_number = g.aid#(lf)left join undergrads ug                                                ON e.id_number = ug.aid#(lf)left join nongrads ng                                                  ON e.id_number = ng.aid#(lf)left join donors dnrs                                                  ON e.id_number = dnrs.did#(lf)left join lybunts lyb                                                  ON e.id_number = lyb.did#(lf)left join sybunts syb                                                  ON e.id_number = syb.did#(lf)left join advance.donor_summary@ADVANCE2ADVJUL23.CREIGHTON.EDU ds      ON e.id_number = ds.dnr_sum_id_number#(lf)where e.record_type_code IN ('A','CA')#(lf)and   xa10.vse_alumni_type LIKE '1%'#(lf)and   e.record_status_code NOT IN ('R','X','Z')#(lf)and   e.id_number NOT IN (select * from excludes)#(lf)#(lf)order by \"\"Rec Status\"\" desc, Sort_Death, Sort_Type, Sort_Alum\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"CY Total\", Currency.Type}, {\"PY Total\", Currency.Type}, {\"Syb Total\", Currency.Type}, {\"Lifetime Giving\", Currency.Type}, {\"Pre-Syb Total\", Currency.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"-- Query written to pull FY22's Alumni data for calculating participation; pulls new VSE Alumni Types as well as \\\"\\\"old\\\"\\\" VSE categories.#(lf)--    This query mirrors \\\"\\\"Alumni Participation Query\\\"\\\" but uses the FYE22 snapshot bridge to pull data.  smk 3/23/2023#(lf)-- Change to FY23 snapshot bridge. jdw 8/8/2023#(lf)#(lf)#(lf)WITH grads AS (#(lf)               select d1.id_number aid, 'Graduate' cat#(lf)                 from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d1#(lf)                where d1.institution_code = '6121'#(lf)                and   d1.degree_level_code IN ('M','D')#(lf)                and   d1.non_grad_code <> 'Y'#(lf)                and   d1.degree_type <> 'S'#(lf)                and   d1.admiss_status_code = ' '#(lf)                ),#(lf)undergrads AS (#(lf)               select d2.id_number aid, 'Undergrad' cat#(lf)                 from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d2#(lf)                where d2.institution_code = '6121'#(lf)                and   d2.degree_level_code IN ('A','B','C','P','R')#(lf)                and   d2.non_grad_code <> 'Y'#(lf)                and   d2.degree_type <> 'S'#(lf)                and   d2.admiss_status_code = ' '#(lf)                ),#(lf)nongrads AS (#(lf)             select d3.id_number aid, 'Nongrad' cat#(lf)               from advance.degrees@ADVANCE2ADVJUL23.CREIGHTON.EDU d3#(lf)              where d3.institution_code = '6121'#(lf)              and   d3.degree_level_code NOT IN ('A','B','C','P','R','M','D')#(lf)              and   (d3.non_grad_code = 'Y'#(lf)                or   d3.admiss_status_code IN ('DSM','WTH')#(lf)                or   d3.degree_level_code IN ('O','H') )#(lf)              and   d3.degree_type <> 'S'#(lf)              ),#(lf)donors AS (#(lf)        select xg1.gift_donor_id did, sum(xg1.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg1#(lf)         where xg1.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-1#(lf)         and   xg1.gift_associated_code NOT IN ('M','H')#(lf)         group by xg1.gift_donor_id#(lf)         ),#(lf)  -- When it is available, update this to use the ADVJUL21 bridge#(lf)lybunts AS (#(lf)        select xg2.gift_donor_id did, sum(xg2.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg2#(lf)         where xg2.gift_year_of_giving = advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-2#(lf)         and   xg2.gift_associated_code NOT IN ('M','H')#(lf)         group by xg2.gift_donor_id#(lf)         ),#(lf)  -- When it is available, update this to use the ADVJUL20 bridge#(lf)sybunts AS (#(lf)        select xg3.gift_donor_id did, sum(xg3.gift_associated_amount) ttl#(lf)          from advance.gift@ADVANCE2ADVJUL23.CREIGHTON.EDU xg3#(lf)         where xg3.gift_year_of_giving < advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-2#(lf)         and   xg3.gift_year_of_giving >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-11#(lf)         and   xg3.gift_associated_code NOT IN ('M','H')#(lf)         group by xg3.gift_donor_id#(lf)         ),#(lf)excludes AS (#(lf)             select x.id_number eid#(lf)               from advance.entity@ADVANCE2ADVJUL23.CREIGHTON.EDU x#(lf)              where (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) = '0000')#(lf)              or    (x.record_status_code IN ('D','P')#(lf)                 and substr(x.death_dt,1,4) < '2014')#(lf)               )#(lf)#(lf)select distinct xa10.id_number                    \\\"\\\"Entity ID\\\"\\\",#(lf)       e.pref_mail_name                           \\\"\\\"Alumni Name\\\"\\\",#(lf)       e.institutional_suffix                     \\\"\\\"Inst Suffix\\\"\\\",#(lf)       rs.short_desc                              \\\"\\\"Rec Status\\\"\\\",#(lf)       substr(e.death_dt,5,2)||'/'||substr(e.death_dt,7,2)||'/'||substr(e.death_dt,1,4) \\\"\\\"Death Dt\\\"\\\",#(lf)       substr(xa10.vse_alumni_type,instr(xa10.vse_alumni_type,' ')) \\\"\\\"Alumni Type\\\"\\\",#(lf)       CASE WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid IS NULL THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid > ' ' AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Graduate-Only'#(lf)            WHEN g.aid > ' ' AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid IS NULL THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid > ' ' AND ng.aid > ' ' THEN 'Undergraduate'#(lf)            WHEN g.aid IS NULL AND ug.aid IS NULL AND ng.aid > ' ' THEN 'Nongrad'#(lf)          ELSE 'Nongrad' END                      \\\"\\\"Old VSE Type\\\"\\\",#(lf)       g.cat                                      \\\"\\\"Grads\\\"\\\",#(lf)       ug.cat                                     \\\"\\\"Undergrads\\\"\\\",#(lf)       ng.cat                                     \\\"\\\"Non-Grads\\\"\\\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 THEN 'Current Donor'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) > 0 THEN 'Lybunt'#(lf)            WHEN nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Sybunt'#(lf)          ELSE 'Non-Donor' END                    \\\"\\\"Donor Category\\\"\\\",#(lf)       CASE WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Acquired'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) > 0 THEN 'Retained'#(lf)            WHEN nvl(dnrs.ttl,0) > 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) > 0 THEN 'Reactivated'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Past Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) > 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND nvl(lyb.ttl,0) = 0 AND nvl(syb.ttl,0) = 0 THEN 'Never-Donor'#(lf)            WHEN nvl(ds.dnr_sum_lifetime_asc_amt,0) = 0 AND nvl(dnrs.ttl,0) = 0 AND (nvl(lyb.ttl,0) > 0 OR nvl(syb.ttl,0) > 0) THEN 'Recent Donor'#(lf)          ELSE 'Investigate' END                  \\\"\\\"Donor Type\\\"\\\", #(lf)       nvl(dnrs.ttl,0)                            \\\"\\\"CY Total\\\"\\\",#(lf)       nvl(lyb.ttl,0)                             \\\"\\\"PY Total\\\"\\\",#(lf)       nvl(syb.ttl,0)                             \\\"\\\"Syb Total\\\"\\\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0)         \\\"\\\"Lifetime Giving\\\"\\\",#(lf)       nvl(ds.dnr_sum_lifetime_asc_amt,0) - (nvl(dnrs.ttl,0) + nvl(lyb.ttl,0) + nvl(syb.ttl,0)) \\\"\\\"Pre-Syb Total\\\"\\\",#(lf)       xa10.vse_alumni_type                       Sort_Type,#(lf)       e.death_dt                                 Sort_Death,#(lf)       e.pref_name_sort                           Sort_Alum#(lf)from advur.mvw_ent_vse_alumni_type@ADVANCE2ADVJUL23.CREIGHTON.EDU xa10#(lf)inner join advance.entity@ADVANCE2ADVJUL23.CREIGHTON.EDU e             ON xa10.id_number = e.id_number#(lf)inner join advance.tms_record_status@ADVANCE2ADVJUL23.CREIGHTON.EDU rs ON e.record_status_code = rs.record_status_code#(lf)left join grads g                                                      ON e.id_number = g.aid#(lf)left join undergrads ug                                                ON e.id_number = ug.aid#(lf)left join nongrads ng                                                  ON e.id_number = ng.aid#(lf)left join donors dnrs                                                  ON e.id_number = dnrs.did#(lf)left join lybunts lyb                                                  ON e.id_number = lyb.did#(lf)left join sybunts syb                                                  ON e.id_number = syb.did#(lf)left join advance.donor_summary@ADVANCE2ADVJUL23.CREIGHTON.EDU ds      ON e.id_number = ds.dnr_sum_id_number#(lf)where e.record_type_code IN ('A','CA')#(lf)and   xa10.vse_alumni_type LIKE '1%'#(lf)and   e.record_status_code NOT IN ('R','X','Z')#(lf)and   e.id_number NOT IN (select * from excludes)#(lf)#(lf)order by \\\"\\\"Rec Status\\\"\\\" desc, Sort_Death, Sort_Type, Sort_Alum\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"CY Total\\\", Currency.Type}, {\\\"PY Total\\\", Currency.Type}, {\\\"Syb Total\\\", Currency.Type}, {\\\"Lifetime Giving\\\", Currency.Type}, {\\\"Pre-Syb Total\\\", Currency.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Historical Alumni Counts",
      "lineageTag": "e2b4e669-1f3c-4980-93be-d7dce3717026",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"select c.fiscal_yr             \"\"Fiscal Yr\"\",#(lf)       sum(c.alumni_cnt)       \"\"Alumni Count\"\",#(lf)       lag(sum(c.alumni_cnt)) over (order by c.fiscal_yr)  \"\"Prior Yr Count\"\",#(lf)       sum(c.alumni_cnt) - lag(sum(c.alumni_cnt)) over (order by c.fiscal_yr) \"\"Difference\"\"#(lf) from advur.tbl_vse_alum_cnts c#(lf)where c.fiscal_yr between advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6 #(lf)                          and advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-1#(lf)and c.degree_type <> 0#(lf)group by c.fiscal_yr\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Alumni Count\", Int64.Type}, {\"Prior Yr Count\", Int64.Type}, {\"Difference\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"select c.fiscal_yr             \\\"\\\"Fiscal Yr\\\"\\\",#(lf)       sum(c.alumni_cnt)       \\\"\\\"Alumni Count\\\"\\\",#(lf)       lag(sum(c.alumni_cnt)) over (order by c.fiscal_yr)  \\\"\\\"Prior Yr Count\\\"\\\",#(lf)       sum(c.alumni_cnt) - lag(sum(c.alumni_cnt)) over (order by c.fiscal_yr) \\\"\\\"Difference\\\"\\\"#(lf) from advur.tbl_vse_alum_cnts c#(lf)where c.fiscal_yr between advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6 #(lf)                          and advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-1#(lf)and c.degree_type <> 0#(lf)group by c.fiscal_yr\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Alumni Count\\\", Int64.Type}, {\\\"Prior Yr Count\\\", Int64.Type}, {\\\"Difference\\\", Int64.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "JB Only Donors",
      "lineageTag": "3c68319c-453d-4166-9181-f83ee699e019",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"-- This query was translated from one created by Blake; now references our reporting views.  smk 9/13/2021#(lf)-- Updated to pull details for the current FY and previous five FYs; will be used in Alumni Participation PBI reports to identify Jaybacker-Only donors. smk 9/13/2021#(lf)-- Updated to not focus on households, but individuals. smk 3/30/2023#(lf)-- Updated to exclude non-alumni. jdw 8/8/2023#(lf)#(lf)#(lf)select distinct te.donor_id           donor_id,#(lf)       rev2.fiscal_yr                 fiscal_yr#(lf)from advur.mvw_total_revenue rev2#(lf)inner join advur.mvw_trans_entities te            ON rev2.trans_nbr = te.trans_nbr#(lf)inner join advance.gift g                         ON te.trans_nbr = g.gift_receipt_number AND te.donor_id = g.gift_donor_id#(lf)INNER JOIN advur.mvw_ent_vse_alumni_type vse ON te.DONOR_ID = vse.ID_NUMBER #(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)AND vse.VSE_ALUMNI_TYPE LIKE '1%'#(lf)where rev2.allocation_code IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)and   g.gift_associated_code NOT IN ('M','H')#(lf)and   g.gift_associated_amount > 0#(lf)and   rev2.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)and   te.donor_id||rev2.fiscal_yr NOT IN (select xte.donor_id||xr2.fiscal_yr#(lf)                                                  from advur.mvw_total_revenue xr2#(lf)                                                 inner join advur.mvw_trans_entities xte ON xr2.trans_nbr = xte.trans_nbr#(lf)                                                 inner join advance.gift xg              ON xte.trans_nbr = xg.gift_receipt_number AND xte.donor_id = xg.gift_donor_id#(lf)                                                 INNER JOIN advur.mvw_ent_vse_alumni_type xvse ON xte.DONOR_ID = xvse.ID_NUMBER #(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)  AND xvse.VSE_ALUMNI_TYPE LIKE '1%'#(lf)                                                 where xr2.allocation_code NOT IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)                                                 and   xg.gift_associated_code NOT IN ('M','H')#(lf)                                                 and   xg.gift_associated_amount > 0#(lf)                                                 and   xr2.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)                                            )#(lf)order by donor_id, fiscal_yr\"])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"-- This query was translated from one created by Blake; now references our reporting views.  smk 9/13/2021#(lf)-- Updated to pull details for the current FY and previous five FYs; will be used in Alumni Participation PBI reports to identify Jaybacker-Only donors. smk 9/13/2021#(lf)-- Updated to not focus on households, but individuals. smk 3/30/2023#(lf)-- Updated to exclude non-alumni. jdw 8/8/2023#(lf)#(lf)#(lf)select distinct te.donor_id           donor_id,#(lf)       rev2.fiscal_yr                 fiscal_yr#(lf)from advur.mvw_total_revenue rev2#(lf)inner join advur.mvw_trans_entities te            ON rev2.trans_nbr = te.trans_nbr#(lf)inner join advance.gift g                         ON te.trans_nbr = g.gift_receipt_number AND te.donor_id = g.gift_donor_id#(lf)INNER JOIN advur.mvw_ent_vse_alumni_type vse ON te.DONOR_ID = vse.ID_NUMBER #(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)AND vse.VSE_ALUMNI_TYPE LIKE '1%'#(lf)where rev2.allocation_code IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)and   g.gift_associated_code NOT IN ('M','H')#(lf)and   g.gift_associated_amount > 0#(lf)and   rev2.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)and   te.donor_id||rev2.fiscal_yr NOT IN (select xte.donor_id||xr2.fiscal_yr#(lf)                                                  from advur.mvw_total_revenue xr2#(lf)                                                 inner join advur.mvw_trans_entities xte ON xr2.trans_nbr = xte.trans_nbr#(lf)                                                 inner join advance.gift xg              ON xte.trans_nbr = xg.gift_receipt_number AND xte.donor_id = xg.gift_donor_id#(lf)                                                 INNER JOIN advur.mvw_ent_vse_alumni_type xvse ON xte.DONOR_ID = xvse.ID_NUMBER #(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)  AND xvse.VSE_ALUMNI_TYPE LIKE '1%'#(lf)                                                 where xr2.allocation_code NOT IN ('OATHOTHJMB','OATHOTHJAYB01','OATHOTHJAYAUX','OATHOTHPRSV')#(lf)                                                 and   xg.gift_associated_code NOT IN ('M','H')#(lf)                                                 and   xg.gift_associated_amount > 0#(lf)                                                 and   xr2.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate,'MM/DD/YYYY'))-6#(lf)                                            )#(lf)order by donor_id, fiscal_yr\\\"])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "FY Dates",
      "lineageTag": "1b11c251-952b-4ca7-abb5-6d6d78a48e07",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"select *#(lf)from advance.cu_year_ext y#(lf)where y.year_type = 'F'\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"START_DATE\", type date}, {\"CLOSE_DATE\", type date}}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Changed Type\",{{\"YEAR_YEAR\", Order.Ascending}})",
        "in",
        "    #\"Sorted Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"select *#(lf)from advance.cu_year_ext y#(lf)where y.year_type = 'F'\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"START_DATE\\\", type date}, {\\\"CLOSE_DATE\\\", type date}}),\\n    #\\\"Sorted Rows\\\" = Table.Sort(#\\\"Changed Type\\\",{{\\\"YEAR_YEAR\\\", Order.Ascending}})\\nin\\n    #\\\"Sorted Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Hist 5-Yr Alumni Counts",
      "lineageTag": "c4b5a02b-e4c6-4dab-8c53-4fe3906592a9",
      "text": [
        "let",
        "    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\"-- Query designed to pull aggregated Alumni and Alumni donor counts for the last 5 FYs, broken out by the old VSE categorization.  smk 4/14/2023#(lf)#(lf)select vse.fiscal_yr              \"\"Fiscal Yr\"\",#(lf)       CASE WHEN vse.degree_type = 1 AND vse.FISCAL_YR > 2022 THEN 'Multiple Degreed'#(lf)            WHEN (vse.degree_type = 2 AND vse.FISCAL_YR > 2022) #(lf)            #(tab) OR (vse.degree_type = 1 AND vse.FISCAL_YR <= 2022) THEN '4-Year Undergraduate Degreed'#(lf)            WHEN vse.degree_type = 3 AND vse.FISCAL_YR > 2022 THEN 'Associate’s Degreed'#(lf)            WHEN (vse.degree_type = 4 AND vse.FISCAL_YR > 2022)#(lf)            #(tab) OR (vse.degree_type = 2 AND vse.FISCAL_YR <= 2022) THEN 'Graduate-Degreed'#(lf)            WHEN vse.degree_type = 5 AND vse.FISCAL_YR > 2022 THEN 'Certificate or Award'#(lf)            WHEN (vse.degree_type = 6 AND vse.FISCAL_YR > 2022) #(lf)                 OR (vse.degree_type = 0 AND vse.FISCAL_YR <= 2022) THEN 'Non-Degreed Alumni'#(lf)            WHEN vse.degree_type = 0 AND vse.FISCAL_YR > 2022 THEN 'Other'#(lf)          ELSE 'Check' END        \"\"Deg Type\"\",#(lf)       vse.alumni_cnt             \"\"Alumni Count\"\",#(lf)       vse.legal_donor_cnt        \"\"Lgl Dnr Count\"\",#(lf)       vse.legal_amt              \"\"Lgl Amount\"\",#(lf)       vse.soft_donor_cnt         \"\"Soft Dnr Count\"\",#(lf)       vse.soft_legal_amt         \"\"Soft Amount\"\",#(lf)       CASE WHEN vse.degree_type = 1 THEN 1#(lf)            WHEN vse.degree_type = 2 THEN 2#(lf)            WHEN vse.degree_type = 0 THEN 3#(lf)          ELSE 4 END              \"\"Sort Type\"\"#(lf)from advur.tbl_vse_alum_cnts vse#(lf)where vse.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-5#(lf)#(lf)order by \"\"Fiscal Yr\"\", \"\"Sort Type\"\"\"]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Alumni Count\", Int64.Type}, {\"Lgl Dnr Count\", Int64.Type}, {\"Lgl Amount\", Currency.Type}, {\"Soft Amount\", Currency.Type}, {\"Sort Type\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Oracle.Database(Data_Source, [HierarchicalNavigation=true, Query=\\\"-- Query designed to pull aggregated Alumni and Alumni donor counts for the last 5 FYs, broken out by the old VSE categorization.  smk 4/14/2023#(lf)#(lf)select vse.fiscal_yr              \\\"\\\"Fiscal Yr\\\"\\\",#(lf)       CASE WHEN vse.degree_type = 1 AND vse.FISCAL_YR > 2022 THEN 'Multiple Degreed'#(lf)            WHEN (vse.degree_type = 2 AND vse.FISCAL_YR > 2022) #(lf)            #(tab) OR (vse.degree_type = 1 AND vse.FISCAL_YR <= 2022) THEN '4-Year Undergraduate Degreed'#(lf)            WHEN vse.degree_type = 3 AND vse.FISCAL_YR > 2022 THEN 'Associate’s Degreed'#(lf)            WHEN (vse.degree_type = 4 AND vse.FISCAL_YR > 2022)#(lf)            #(tab) OR (vse.degree_type = 2 AND vse.FISCAL_YR <= 2022) THEN 'Graduate-Degreed'#(lf)            WHEN vse.degree_type = 5 AND vse.FISCAL_YR > 2022 THEN 'Certificate or Award'#(lf)            WHEN (vse.degree_type = 6 AND vse.FISCAL_YR > 2022) #(lf)                 OR (vse.degree_type = 0 AND vse.FISCAL_YR <= 2022) THEN 'Non-Degreed Alumni'#(lf)            WHEN vse.degree_type = 0 AND vse.FISCAL_YR > 2022 THEN 'Other'#(lf)          ELSE 'Check' END        \\\"\\\"Deg Type\\\"\\\",#(lf)       vse.alumni_cnt             \\\"\\\"Alumni Count\\\"\\\",#(lf)       vse.legal_donor_cnt        \\\"\\\"Lgl Dnr Count\\\"\\\",#(lf)       vse.legal_amt              \\\"\\\"Lgl Amount\\\"\\\",#(lf)       vse.soft_donor_cnt         \\\"\\\"Soft Dnr Count\\\"\\\",#(lf)       vse.soft_legal_amt         \\\"\\\"Soft Amount\\\"\\\",#(lf)       CASE WHEN vse.degree_type = 1 THEN 1#(lf)            WHEN vse.degree_type = 2 THEN 2#(lf)            WHEN vse.degree_type = 0 THEN 3#(lf)          ELSE 4 END              \\\"\\\"Sort Type\\\"\\\"#(lf)from advur.tbl_vse_alum_cnts vse#(lf)where vse.fiscal_yr >= advur.fn_get_fytd_fiscalyear(to_char(sysdate, 'MM/DD/YYYY'))-5#(lf)#(lf)order by \\\"\\\"Fiscal Yr\\\"\\\", \\\"\\\"Sort Type\\\"\\\"\\\"]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Alumni Count\\\", Int64.Type}, {\\\"Lgl Dnr Count\\\", Int64.Type}, {\\\"Lgl Amount\\\", Currency.Type}, {\\\"Soft Amount\\\", Currency.Type}, {\\\"Sort Type\\\", Int64.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Fiscal Yr Selection",
      "lineageTag": "497e09f0-209d-4c10-b417-27fee3f510a1",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjIwtFCK1QEzLKEMIwMYwxDGMIIxjGEMExjDFMYwU4qNBQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Fiscal Yrs\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Fiscal Yrs\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WMjIwtFCK1QEzLKEMIwMYwxDGMIIxjGEMExjDFMYwU4qNBQA=\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\\\"Fiscal Yrs\\\" = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Fiscal Yrs\\\", Int64.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DataSource",
      "lineageTag": "a467f510-e94b-47f1-9215-6c9273fc4c6c",
      "text": [
        "let",
        "    Source = Data_Source",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Data_Source\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Max Rev Date",
      "lineageTag": "e56a18be-7b13-4911-81e3-9aac7bc430f9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = List.Max( #\"Alumni Rev Transactions_5+ Yrs\"[Trans Dt] )",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "resultType": "Date"
    }
  ],
  "queryGroups": [],
  "culture": "en-US",
  "firewallEnabled": true
}